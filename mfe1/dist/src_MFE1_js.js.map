{"version":3,"sources":["webpack://@redux-reducer-injection/mfe1/./src/MFE1.js","webpack://@redux-reducer-injection/mfe1/./src/constants.js","webpack://@redux-reducer-injection/mfe1/./src/mfe1slice.js","webpack://@redux-reducer-injection/mfe1/./src/styled.jsx"],"names":["getGlobalCount","getGlobalLanguage","selectors","MFE1","globalLanguage","useSelector","globalCount","marginTop","GREETING","en","fr","scope","initialState","globalActions","updateGlobalCount","createAction","selectGlobalLanguage","mfe1Slice","createSlice","name","reducers","test","state","action","console","log","type","extraReducers","builder","addCase","payload","addDefaultCase","actions","reducer","styled"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;CAEA;;AACA;AACA;AACA;AAEA,MAAM;AAAEA,gBAAF;AAAkBC;AAAlB,IAAwCC,oDAA9C;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,cAAc,GAAGC,wDAAW,CAACJ,iBAAD,CAAlC;AACA,QAAMK,WAAW,GAAGD,wDAAW,CAACL,cAAD,CAA/B;AACA,sBACE;AAAK,SAAK,EAAE;AAAEO,eAAS,EAAE;AAAb;AAAZ,kBACE,2DAAC,gDAAD,QAAcC,kDAAQ,CAACJ,cAAD,CAAtB,CADF,eAEE,yFAAmBE,WAAnB,MAFF,eAGE,4FAHF,eAIE,oFACE,iJAA6D,mFAA7D,wBAAsF,gFAAtF,2CADF,eAEE,4FAAQ,mFAAR,+IAAwJ,iFAAxJ,eAFF,eAGE,4FAAQ,gFAAR,iFAAuF,8EAAvF,iDAAiI,iFAAjI,0CAAuK,oFAAvK,wIAHF,eAIE,+FAAW,0FAAX,wBAA2C,uFAA3C,mDAAmG,gFAAnG,kEAJF,eAKE,sIAAkD,kGAAlD,wBAA0F,+FAA1F,qCALF,eAME,oFAAI,8EAAJ,4HANF,eAOE,oFAAI,8EAAJ,sJAAmJ;AAAG,QAAI,EAAC,uBAAR;AAAgC,UAAM,EAAC;AAAvC,6BAAnJ,mDAA4P,oFAA5P,8BAA4R,4FAA5R,MAPF,CAJF,CADF;AAgBD,CAnBD;;AAqBA,iEAAeH,IAAf,E;;;;;;;;;;;;;;;AC9BA,iEAAe;AACbM,IAAE,EAAE,kBADS;AAEbC,IAAE,EAAE;AAFS,CAAf,E;;;;;;;;;;;;;;;;;;;ACAA;AAEA,MAAMC,KAAK,GAAG,MAAd;AAEA,MAAMC,YAAY,GAAG;AACnBR,gBAAc,EAAE,IADG;AAEnBE,aAAW,EAAE;AAFM,CAArB,C,CAKA;;AACA,MAAMO,aAAa,GAAG;AACpBC,mBAAiB,EAAEC,8DAAY,CAAC,qBAAD,CADX;AAEpBC,sBAAoB,EAAED,8DAAY,CAAC,wBAAD;AAFd,CAAtB;AAKO,MAAME,SAAS,GAAGC,6DAAW,CAAC;AACnCC,MAAI,EAAER,KAD6B;AAEnCC,cAFmC;AAGnCQ,UAAQ,EAAE;AACRC,QAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvBC,aAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAJ,WAAK;AACN;AAJO,GAHyB;AASnC;AACAK,eAAa,EAAGC,OAAD,IAAa;AAC1BA,WAAO,CACJC,OADH,CACWhB,aAAa,CAACC,iBADzB,EAC4C,CAACQ,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,WAAK,CAAChB,WAAN,IAAqBiB,MAAM,CAACO,OAA5B;AACD,KAHH,EAIGD,OAJH,CAIWhB,aAAa,CAACG,oBAJzB,EAI+C,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAC9DD,WAAK,CAAClB,cAAN,GAAuBmB,MAAM,CAACO,OAA9B;AACD,KANH,EAOGC,cAPH,CAOmBT,KAAD,IAAW;AACzBA,WAAK;AACN,KATH;AAUD;AArBkC,CAAD,CAA7B;AAwBA,MAAMpB,SAAS,GAAG;AACvBD,mBAAiB,EAAGqB,KAAD,IAAWA,KAAK,CAACX,KAAD,CAAL,CAAaP,cADpB;AAEvBJ,gBAAc,EAAGsB,KAAD,IAAWA,KAAK,CAACX,KAAD,CAAL,CAAaL;AAFjB,CAAlB,C,CAKP;;AACO,MAAM0B,OAAO,GAAG,EAAE,GAAGf,SAAS,CAACe,OAAf;AAAwB,KAAGnB;AAA3B,CAAhB;AAEP,iEAAeI,SAAS,CAACgB,OAAzB,E;;;;;;;;;;;;;;;;;AC/CA;AAEA,iEAAeC,6DAAU;AACzB;AACA;AACA;AACA,CAJA,E","file":"src_MFE1_js.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n// import { selectors } from './reducer';\nimport StyledTitle from './styled.jsx';\nimport GREETING from './constants.js';\nimport { selectors } from './mfe1slice.js';\n\nconst { getGlobalCount, getGlobalLanguage } = selectors;\n\nconst MFE1 = () => {\n  const globalLanguage = useSelector(getGlobalLanguage);\n  const globalCount = useSelector(getGlobalCount);\n  return (\n    <div style={{ marginTop: '10px' }}>\n      <StyledTitle>{GREETING[globalLanguage]}</StyledTitle>\n      <h1>The count is: {globalCount} </h1>\n      <h3>MFE1 architecture:</h3>\n      <ul>\n        <li>Exposes two endpoints (via webpack 5 module federation): <code>reducer</code> and <code>MFE1</code>.  These are imported by the host app.</li>\n        <li>The <code>reducer</code> endpoint provides access to the MFE reducer (via default export) as well a the scope name to be used in the store (via the <code>scope</code> constant)</li>\n        <li>The <code>MFE1</code> endpoint provides access to the MFE react component itself.  <b>NOTE:</b> the exported react component <b>MUST NOT</b> be wrapped in a redux <code>Provider</code> as this would result in a nested store when it is imported into the host which can lead to errors in reading or updating the store</li>\n        <li>Stores <code>globalLanguage</code> and <code>globalCount</code> in it's local store (scoped to <code>mfe1</code>) for updating display of the greeting and count respectively</li>\n        <li>MFE1 reducer is subscribed to actions of type <code>GLOBAL/SELECT_LANGUAGE</code> and <code>GLOBAL/UPDATE_COUNT</code> to update the mfe1 scoped store</li>\n        <li><b>Note:</b> this component does not dispatch any actions whatsoever, updates to its store are entirely dependent on global actions</li>\n        <li><b>Note:</b> to properly display this MFE as a stand alone app it must be provided with its own store.  In this case the root url for the app (<a href=\"http://localhost:3002\" target=\"_blank\">http://localhost:3002</a>) loads MFE1 wrapped in a redux <code>Provider</code> (found in <code>src/bootstrap.js</code>)</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default MFE1;\n","export default {\n  en: 'Welcome to MFE1!',\n  fr: 'Bienvenue a MFE1!'\n}","import { createSlice, createAction } from '@reduxjs/toolkit'\n\nconst scope = 'mfe1';\n\nconst initialState = {\n  globalLanguage: 'en',\n  globalCount: 0,\n}\n\n//globally scoped actions must be created individually using createAction\nconst globalActions = {\n  updateGlobalCount: createAction('GLOBAL/UPDATE_COUNT'),\n  selectGlobalLanguage: createAction('GLOBAL/SELECT_LANGUAGE'),\n}\n\nexport const mfe1Slice = createSlice({\n  name: scope,\n  initialState,\n  reducers: {\n    test: (state, action) => {\n      console.log(action.type)\n      state\n    }\n  },\n  // global reducers are passed using a builder function via the extraReducers key\n  extraReducers: (builder) => {\n    builder\n      .addCase(globalActions.updateGlobalCount, (state, action) => {\n        state.globalCount += action.payload;\n      })\n      .addCase(globalActions.selectGlobalLanguage, (state, action) => {\n        state.globalLanguage = action.payload;\n      })\n      .addDefaultCase((state) => {\n        state;\n      })\n  }\n});\n\nexport const selectors = {\n  getGlobalLanguage: (state) => state[scope].globalLanguage,\n  getGlobalCount: (state) => state[scope].globalCount,\n}\n\n// global actions are not necessarily be disptched from the MFE, the MFE may simply subscribe to them\nexport const actions = { ...mfe1Slice.actions, ...globalActions };\n\nexport default mfe1Slice.reducer;","import styled from 'styled-components';\n\nexport default styled.h1`\n  font-size: 48px;\n  font-weight: 100;\n  font-family: Arial, Helvetica, sans-serif !important;\n`"],"sourceRoot":""}