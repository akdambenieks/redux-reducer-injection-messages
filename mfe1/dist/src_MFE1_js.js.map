{"version":3,"sources":["webpack://@redux-reducer-injection/mfe1/./src/MFE1.js","webpack://@redux-reducer-injection/mfe1/./src/reducer.js"],"names":["RemoteApp","dispatch","useDispatch","state","useSelector","remoteAppScope","hostState","hostAppScope","remoteAppInput","setRemoteAppInput","useState","messages","getMessages","console","log","marginTop","appName","language","length","marginRight","e","target","value","changeAppNameAction","enqueMessage","changeLanguageAction","RemoteAppWrapper","props","Object","keys","store","useEffect","injectReducer","reducer","initialState","CHANGE_APP_NAME","ENQUEUE_MESSAGE","CHANGE_LANGUAGE","type","payload","message","action","result"],"mappings":"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","file":"src_MFE1_js.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\n\nimport reducer, {\n  changeAppNameAction,\n  changeLanguageAction,\n  enqueMessage,\n  getMessages,\n  remoteAppScope,\n  hostAppScope\n} from './reducer';\n\nconst RemoteApp = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state[remoteAppScope]);\n  const hostState = useSelector((state) => state[hostAppScope]);\n  const [remoteAppInput, setRemoteAppInput] = useState('');\n  const messages = useSelector(getMessages)\n\n  console.log('Messages', messages);\n\n  return (\n    <div style={{ marginTop: '10px' }}>\n      <div>RemoteApp</div>\n      <div>\n        RemoteApp's name from the redux store : {state && state.appName}\n      </div>\n      <br />\n      <div>\n        HostApp's language from the redux store : {hostState && hostState.language}\n      </div>\n      <div>\n        You have {messages.length} message(s)\n      </div>\n\n      <div>\n        <input\n          style={{ marginRight: '10px' }}\n          type=\"text\"\n          onChange={(e) => {\n            setRemoteAppInput(e.target.value);\n          }}\n        />\n        <button onClick={() => dispatch(changeAppNameAction(remoteAppInput))}>\n          Dispatch RemoteApp new name\n        </button>\n        <button onClick={() => dispatch(enqueMessage(changeLanguageAction(remoteAppInput)))}>\n          Dispatch HostApp change language\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst RemoteAppWrapper = (props) => {\n  console.log(Object.keys(props));\n  const { store } = props;\n  console.log(store);\n  useEffect(() => {\n    store.injectReducer(remoteAppScope, reducer);\n    return () => console.log('Unmounting App2')\n  }, []);\n\n  return (\n    <Provider store={store || {}}>\n      <RemoteApp />\n    </Provider>\n  );\n};\n\nexport default RemoteAppWrapper;\n","const initialState = {\n  appName: 'mfe1',\n  language: 'en',\n  messages: []\n};\n\nconst CHANGE_APP_NAME = 'CHANGE_APP_NAME';\nconst ENQUEUE_MESSAGE = 'GLOBAL/ENQUEUE_MESSAGE';\nconst CHANGE_LANGUAGE = 'GLOBAL/CHANGE_LANGUAGE';\n\nconst changeAppNameAction = (appName) => {\n  return { type: CHANGE_APP_NAME, payload: appName };\n};\n\nconst enqueMessage = (message) => {\n  return {\n    type: ENQUEUE_MESSAGE,\n    payload: message\n  }\n}\n\nconst changeLanguageAction = (language) => {\n  return { type: CHANGE_LANGUAGE, payload: language}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_APP_NAME: {\n      return {\n        ...state,\n        appName: action.payload,\n      };\n    }\n    case ENQUEUE_MESSAGE:\n      console.log('Action in app',action)\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      }\n    case CHANGE_LANGUAGE:\n      return {\n        ...state,\n        language: action.payload\n      }\n    default:\n      return state\n  }\n  return result\n};\n\nconst remoteAppScope = 'mfe1';\nconst hostAppScope = 'host';\n\nconst getMessages = (state) => {\n  if(state[remoteAppScope])\n    return state[remoteAppScope].messages;\n  else\n    return []\n}\n\nexport { changeAppNameAction, changeLanguageAction, enqueMessage, getMessages, remoteAppScope, hostAppScope };\nexport default reducer;\n"],"sourceRoot":""}