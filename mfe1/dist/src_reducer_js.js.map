{"version":3,"sources":["webpack://@redux-reducer-injection/mfe1/./src/mfe1slice.js","webpack://@redux-reducer-injection/mfe1/./src/reducer.js"],"names":["scope","initialState","globalLanguage","globalCount","globalActions","updateGlobalCount","createAction","selectGlobalLanguage","mfe1Slice","createSlice","name","reducers","test","state","action","console","log","type","extraReducers","builder","addCase","payload","addDefaultCase","selectors","getGlobalLanguage","getGlobalCount","actions","reducer","UPDATE_GLOBAL_COUNT","SELECT_GLOBAL_LANGUAGE"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA,MAAMA,KAAK,GAAG,MAAd;AAEA,MAAMC,YAAY,GAAG;AACnBC,gBAAc,EAAE,IADG;AAEnBC,aAAW,EAAE;AAFM,CAArB,C,CAKA;;AACA,MAAMC,aAAa,GAAG;AACpBC,mBAAiB,EAAEC,8DAAY,CAAC,qBAAD,CADX;AAEpBC,sBAAoB,EAAED,8DAAY,CAAC,wBAAD;AAFd,CAAtB;AAKO,MAAME,SAAS,GAAGC,6DAAW,CAAC;AACnCC,MAAI,EAAEV,KAD6B;AAEnCC,cAFmC;AAGnCU,UAAQ,EAAE;AACRC,QAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvBC,aAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAJ,WAAK;AACN;AAJO,GAHyB;AASnC;AACAK,eAAa,EAAGC,OAAD,IAAa;AAC1BA,WAAO,CACJC,OADH,CACWhB,aAAa,CAACC,iBADzB,EAC4C,CAACQ,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,WAAK,CAACV,WAAN,IAAqBW,MAAM,CAACO,OAA5B;AACD,KAHH,EAIGD,OAJH,CAIWhB,aAAa,CAACG,oBAJzB,EAI+C,CAACM,KAAD,EAAQC,MAAR,KAAmB;AAC9DD,WAAK,CAACX,cAAN,GAAuBY,MAAM,CAACO,OAA9B;AACD,KANH,EAOGC,cAPH,CAOmBT,KAAD,IAAW;AACzBA,WAAK;AACN,KATH;AAUD;AArBkC,CAAD,CAA7B;AAwBA,MAAMU,SAAS,GAAG;AACvBC,mBAAiB,EAAGX,KAAD,IAAWA,KAAK,CAACb,KAAD,CAAL,CAAaE,cADpB;AAEvBuB,gBAAc,EAAGZ,KAAD,IAAWA,KAAK,CAACb,KAAD,CAAL,CAAaG;AAFjB,CAAlB,C,CAKP;;AACO,MAAMuB,OAAO,GAAG,EAAE,GAAGlB,SAAS,CAACkB,OAAf;AAAwB,KAAGtB;AAA3B,CAAhB;AAEP,iEAAeI,SAAS,CAACmB,OAAzB,E;;;;;;;;;;;;;;;;;;;AC/CA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA;AAEO,MAAM7B,KAAK,GAAG,MAAd;AAEP,MAAMC,YAAY,GAAG;AACnBC,gBAAc,EAAE,IADG;AAEnBC,aAAW,EAAE;AAFM,CAArB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMuB,OAAO,GAAG,EAAhB;AAEA,MAAMH,SAAS,GAAG;AAChBC,mBAAiB,EAAGX,KAAD,IAAWA,KAAK,CAACb,KAAD,CAAL,CAAaE,cAD3B;AAEhBuB,gBAAc,EAAGZ,KAAD,IAAWA,KAAK,CAACb,KAAD,CAAL,CAAaG;AAFxB,CAAlB;AAKA;AACA,iEAAewB,kDAAf,E","file":"src_reducer_js.js","sourcesContent":["import { createSlice, createAction } from '@reduxjs/toolkit'\n\nconst scope = 'mfe1';\n\nconst initialState = {\n  globalLanguage: 'en',\n  globalCount: 0,\n}\n\n//globally scoped actions must be created individually using createAction\nconst globalActions = {\n  updateGlobalCount: createAction('GLOBAL/UPDATE_COUNT'),\n  selectGlobalLanguage: createAction('GLOBAL/SELECT_LANGUAGE'),\n}\n\nexport const mfe1Slice = createSlice({\n  name: scope,\n  initialState,\n  reducers: {\n    test: (state, action) => {\n      console.log(action.type)\n      state\n    }\n  },\n  // global reducers are passed using a builder function via the extraReducers key\n  extraReducers: (builder) => {\n    builder\n      .addCase(globalActions.updateGlobalCount, (state, action) => {\n        state.globalCount += action.payload;\n      })\n      .addCase(globalActions.selectGlobalLanguage, (state, action) => {\n        state.globalLanguage = action.payload;\n      })\n      .addDefaultCase((state) => {\n        state;\n      })\n  }\n});\n\nexport const selectors = {\n  getGlobalLanguage: (state) => state[scope].globalLanguage,\n  getGlobalCount: (state) => state[scope].globalCount,\n}\n\n// global actions are not necessarily be disptched from the MFE, the MFE may simply subscribe to them\nexport const actions = { ...mfe1Slice.actions, ...globalActions };\n\nexport default mfe1Slice.reducer;","const UPDATE_GLOBAL_COUNT = 'GLOBAL/UPDATE_COUNT';\nconst SELECT_GLOBAL_LANGUAGE = 'GLOBAL/SELECT_LANGUAGE';\nimport reducer from './mfe1slice.js'\n\nexport const scope = 'mfe1';\n\nconst initialState = {\n  globalLanguage: 'en',\n  globalCount: 0,\n};\n\n// const reducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case UPDATE_GLOBAL_COUNT:\n//       return {\n//         ...state,\n//         globalCount: state.globalCount + action.payload\n//       }\n//     case SELECT_GLOBAL_LANGUAGE:\n//       return {\n//         ...state,\n//         globalLanguage: action.payload\n//       }\n//     default:\n//       return state\n//   }\n// };\n\nconst actions = {}\n\nconst selectors = {\n  getGlobalLanguage: (state) => state[scope].globalLanguage,\n  getGlobalCount: (state) => state[scope].globalCount,\n}\n\nexport { selectors, actions };\nexport default reducer;\n"],"sourceRoot":""}