{"version":3,"sources":["webpack://@redux-reducer-injection/mfe2/./src/MFE2.js","webpack://@redux-reducer-injection/mfe2/./src/constants.js","webpack://@redux-reducer-injection/mfe2/./src/mfe2slice.js","webpack://@redux-reducer-injection/mfe2/./src/styled.jsx"],"names":["getActionLog","getGlobalLanguage","selectors","printActionLog","actionLog","map","action","index","MFE2","globalLanguage","useSelector","marginTop","GREETING","en","fr","scope","initialState","actionLogForCount","globalActions","updateGlobalCount","createAction","selectGlobalLanguage","mfe2Slice","createSlice","name","reducers","extraReducers","builder","addCase","state","payload","push","addDefaultCase","actions","reducer","styled"],"mappings":"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","file":"src_MFE2_js.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectors } from './mfe2slice';\nimport StyledTitle from './styled.jsx';\nimport GREETING from './constants.js';\n\nconst { getActionLog, getGlobalLanguage } = selectors;\n\nconst printActionLog = (actionLog) => {\n  return actionLog.map((action, index) => {\n    return (<div key={`${index}-action`}><b>{index+1}: {action}</b></div>)\n    }) \n }\n\nconst MFE2 = () => {\n  const globalLanguage = useSelector(getGlobalLanguage);\n  const actionLog = useSelector(getActionLog);\n  return (\n    <div style={{ marginTop: '10px' }}>\n      <StyledTitle>{GREETING[globalLanguage]}</StyledTitle>\n      <h1>Counter Action Log:</h1>\n      {\n        printActionLog(actionLog)\n      }\n      <h3>MFE1 architecture:</h3>\n      <ul>\n        <li>Exposes two endpoints (via webpack 5 module federation): <code>reducer</code> and <code>MFE2</code>.  These are imported by the host app.</li>\n        <li>The <code>reducer</code> endpoint provides access to the MFE reducer (via default export) as well a the scope name to be used in the store (via the <code>scope</code> constant)</li>\n        <li>The <code>MFE2</code> endpoint provides access to the MFE react component itself.  <b>NOTE:</b> the exported react component <b>MUST NOT</b> be wrapped in a redux <code>Provider</code> as this would result in a nested store when it is imported into the host which can lead to errors in reading or updating the store</li>\n        <li>Stores <code>globalLanguage</code> and <code>actionLogForCount</code> (as an array of strings) in it's local store (scoped to <code>mfe2</code>) for updating display of the greeting and counter action log respectively</li>\n        <li>MFE2 reducer is subscribed to actions of type <code>GLOBAL/SELECT_LANGUAGE</code> and <code>GLOBAL/UPDATE_COUNT</code> to update the mfe2 scoped store</li>\n        <li><b>Note:</b> this component does not dispatch any actions whatsoever, updates to its store are entirely dependent on global actions</li>\n        <li><b>Note:</b> to properly display this MFE as a stand alone app it must be provided with its own store.  In this case the root url for the app (<a href=\"http://localhost:3003\" target=\"_blank\">http://localhost:3003</a>) loads MFE1 wrapped in a redux <code>Provider</code> (found in <code>src/bootstrap.js</code>)</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default MFE2;\n","export default {\n  en: 'Welcome to MFE2!',\n  fr: 'Bienvenue a MFE2!'\n}","import { createSlice, createAction } from '@reduxjs/toolkit'\n\nexport const scope = 'mfe2';\n\nconst initialState = {\n  actionLogForCount: [],\n  globalLanguage: 'en',\n};\n\n//globally scoped actions must be created individually using createAction\nconst globalActions = {\n  updateGlobalCount: createAction('GLOBAL/UPDATE_COUNT'),\n  selectGlobalLanguage: createAction('GLOBAL/SELECT_LANGUAGE'),\n}\n\nexport const mfe2Slice = createSlice({\n  name: scope,\n  initialState,\n  reducers: {},\n  // global reducers are passed using a builder function via the extraReducers key\n  extraReducers: (builder) => {\n    builder\n      .addCase(globalActions.updateGlobalCount, (state, action) => {\n        if (action.payload >= 1) {\n          state.actionLogForCount.push('Increment occured');\n        }\n        else {\n          state.actionLogForCount.push(\"Decrement occured\");\n        }\n      })\n      .addCase(globalActions.selectGlobalLanguage, (state, action) => {\n        state.globalLanguage = action.payload;\n      })\n      .addDefaultCase((state) => {\n        state;\n      })\n  }\n});\n\nexport const selectors = {\n  getGlobalLanguage: (state) => state[scope].globalLanguage,\n  getActionLog: (state) => state[scope].actionLogForCount,\n}\n\n// global actions are not necessarily dispatched from the MFE, the MFE may simply subscribe to them\n// The actions are included here so they can be accessed for the component locally via the bootstrap vesrions for local development.\nexport const actions = { ...mfe2Slice.actions, ...globalActions };\n\nexport default mfe2Slice.reducer;","import styled from 'styled-components';\n\nexport default styled.h1`\n  font-size: 48px;\n  font-weight: 100;\n  font-family: Arial, Helvetica, sans-serif !important;\n`"],"sourceRoot":""}