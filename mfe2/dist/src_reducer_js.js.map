{"version":3,"sources":["webpack://@redux-reducer-injection/mfe2/./src/reducer.js"],"names":["SELECT_GLOBAL_LANGUAGE","UPDATE_GLOBAL_COUNT","initialState","actionLogForCount","globalLanguage","scope","actions","reducer","state","action","type","newState","payload","push","selectors","getGlobalLanguage","getActionLog"],"mappings":";;;;;;;;;;;;;;;;AAAA,MAAMA,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,mBAAiB,EAAE,EADA;AAEnBC,gBAAc,EAAE;AAFG,CAArB;AAKO,MAAMC,KAAK,GAAG,MAAd;AAEA,MAAMC,OAAO,GAAG,EAAhB;;AAEP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,mBAAL;AACE,YAAMU,QAAQ,GAAG,EAAE,GAAGH;AAAL,OAAjB;;AACA,UAAIC,MAAM,CAACG,OAAP,KAAmB,CAAvB,EAA0B;AACxBD,gBAAQ,CAACR,iBAAT,CAA2BU,IAA3B,CAAgC,mBAAhC;AACD,OAFD,MAGK;AACHF,gBAAQ,CAACR,iBAAT,CAA2BU,IAA3B,CAAgC,mBAAhC;AACD;;AACD,aAAOF,QAAP;;AACF,SAAKX,sBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,sBAAc,EAAEK,MAAM,CAACG;AAFlB,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAnBD;;AAqBO,MAAMM,SAAS,GAAG;AACvBC,mBAAiB,EAAGP,KAAD,IAAWA,KAAK,CAACH,KAAD,CAAL,CAAaD,cADpB;AAEvBY,cAAY,EAAGR,KAAD,IAAWA,KAAK,CAACH,KAAD,CAAL,CAAaF;AAFf,CAAlB;AAKP,iEAAeI,OAAf,E","file":"src_reducer_js.js","sourcesContent":["const SELECT_GLOBAL_LANGUAGE = 'GLOBAL/SELECT_LANGUAGE';\nconst UPDATE_GLOBAL_COUNT = 'GLOBAL/UPDATE_COUNT';\n\nconst initialState = {\n  actionLogForCount: [],\n  globalLanguage: 'en',\n};\n\nexport const scope = 'mfe2';\n\nexport const actions = {};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_GLOBAL_COUNT:\n      const newState = { ...state };\n      if (action.payload === 1) {\n        newState.actionLogForCount.push('Increment occured');\n      }\n      else {\n        newState.actionLogForCount.push(\"Decrement occured\");\n      }\n      return newState;\n    case SELECT_GLOBAL_LANGUAGE:\n      return {\n        ...state,\n        globalLanguage: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport const selectors = {\n  getGlobalLanguage: (state) => state[scope].globalLanguage,\n  getActionLog: (state) => state[scope].actionLogForCount\n}\n\nexport default reducer;\n"],"sourceRoot":""}