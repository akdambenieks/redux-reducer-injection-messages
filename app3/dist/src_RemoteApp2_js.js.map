{"version":3,"sources":["webpack://@redux-reducer-injection-messages/app3/./src/RemoteApp2.js","webpack://@redux-reducer-injection-messages/app3/./src/reducer.js"],"names":["remoteAppScope","hostAppScope","RemoteApp","dispatch","useDispatch","state","useSelector","hostState","remoteAppInput","setRemoteAppInput","useState","marginTop","appName","language","marginRight","e","target","value","changeAppNameAction","changeHostLanguageAction","RemoteAppWrapper","props","store","useEffect","injectReducer","reducer","console","log","initialState","CHANGE_APP_NAME","type","payload","action"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA,MAAMA,cAAc,GAAG,YAAvB;AACA,MAAMC,YAAY,GAAG,MAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGC,wDAAW,EAA5B;AACA,QAAMC,KAAK,GAAGC,wDAAW,CAAED,KAAD,IAAWA,KAAK,CAACL,cAAD,CAAjB,CAAzB;AACA,QAAMO,SAAS,GAAGD,wDAAW,CAAED,KAAD,IAAWA,KAAK,CAACJ,YAAD,CAAjB,CAA7B;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCC,+CAAQ,CAAC,EAAD,CAApD;AAEA,sBACE;AAAK,SAAK,EAAE;AAAEC,eAAS,EAAE;AAAb;AAAZ,kBACE,qFADF,eAEE,qHAC4CN,KAAK,IAAIA,KAAK,CAACO,OAD3D,CAFF,eAME,sHAC6CL,SAAS,IAAIA,SAAS,CAACM,QADpE,CANF,eAUE,qFACE;AACE,SAAK,EAAE;AAAEC,iBAAW,EAAE;AAAf,KADT;AAEE,QAAI,EAAC,MAFP;AAGE,YAAQ,EAAGC,CAAD,IAAO;AACfN,uBAAiB,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACD;AALH,IADF,eAQE;AAAQ,WAAO,EAAE,MAAMd,QAAQ,CAACe,6DAAmB,CAACV,cAAD,CAApB;AAA/B,mCARF,eAWE;AAAQ,WAAO,EAAE,MAAML,QAAQ,CAACgB,kEAAwB,CAACX,cAAD,CAAzB;AAA/B,wCAXF,CAVF,CADF;AA4BD,CAlCD;;AAoCA,MAAMY,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAEC;AAAF,MAAYD,KAAlB;AACAE,kDAAS,CAAC,MAAM;AACdD,SAAK,CAACE,aAAN,CAAoBxB,cAApB,EAAoCyB,6CAApC;AACA,WAAO,MAAMC,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE,2DAAC,iDAAD;AAAU,SAAK,EAAEL,KAAK,IAAI;AAA1B,kBACE,2DAAC,SAAD,OADF,CADF;AAKD,CAZD;;AAcA,iEAAeF,gBAAf,E;;;;;;;;;;;;;;;;;AC3DA,MAAMQ,YAAY,GAAG;AACnBhB,SAAO,EAAE;AADU,CAArB;AAIA,MAAMiB,eAAe,GAAG,sBAAxB;;AAEA,MAAMX,mBAAmB,GAAIN,OAAD,IAAa;AACvC,SAAO;AAAEkB,QAAI,EAAED,eAAR;AAAyBE,WAAO,EAAEnB;AAAlC,GAAP;AACD,CAFD;;AAIA,MAAMO,wBAAwB,GAAIN,QAAD,IAAc;AAC7C,SAAO;AAAEiB,QAAI,EAAE,sBAAR;AAAgCC,WAAO,EAAElB;AAAzC,GAAP;AACD,CAFD;;AAIA,MAAMY,OAAO,GAAG,CAACpB,KAAK,GAAGuB,YAAT,EAAuBI,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACF,IAAf;AACE,SAAKD,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGxB,KADE;AAELO,iBAAO,EAAEoB,MAAM,CAACD;AAFX,SAAP;AAID;AANH;;AAQA,SAAO1B,KAAP;AACD,CAVD;;AAYA;AACA,iEAAeoB,OAAf,E","file":"src_RemoteApp2_js.js","sourcesContent":["import React, { useState } from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport reducer, { changeAppNameAction, changeHostLanguageAction } from './reducer';\n\nconst remoteAppScope = 'remoteApp2';\nconst hostAppScope = 'host';\n\nconst RemoteApp = () => {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state[remoteAppScope]);\n  const hostState = useSelector((state) => state[hostAppScope]);\n  const [remoteAppInput, setRemoteAppInput] = useState('');\n\n  return (\n    <div style={{ marginTop: '10px' }}>\n      <div>RemoteApp2</div>\n      <div>\n        RemoteApp2's name from the redux store : {state && state.appName}\n      </div>\n\n      <div>\n        HostApp's language from the redux store : {hostState && hostState.language}\n      </div>\n\n      <div>\n        <input\n          style={{ marginRight: '10px' }}\n          type=\"text\"\n          onChange={(e) => {\n            setRemoteAppInput(e.target.value);\n          }}\n        />\n        <button onClick={() => dispatch(changeAppNameAction(remoteAppInput))}>\n          Dispatch RemoteApp new name\n        </button>\n        <button onClick={() => dispatch(changeHostLanguageAction(remoteAppInput))}>\n          Dispatch HostApp change language\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst RemoteAppWrapper = (props) => {\n  const { store } = props;\n  useEffect(() => {\n    store.injectReducer(remoteAppScope, reducer);\n    return () => console.log('Unmounting App3')\n  }, []);\n\n  return (\n    <Provider store={store || {}}>\n      <RemoteApp />\n    </Provider>\n  );\n};\n\nexport default RemoteAppWrapper;\n","const initialState = {\n  appName: 'remoteApp2',\n};\n\nconst CHANGE_APP_NAME = 'APP3/CHANGE_APP_NAME';\n\nconst changeAppNameAction = (appName) => {\n  return { type: CHANGE_APP_NAME, payload: appName };\n};\n\nconst changeHostLanguageAction = (language) => {\n  return { type: 'HOST/CHANGE_LANGUAGE', payload: language}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_APP_NAME: {\n      return {\n        ...state,\n        appName: action.payload,\n      };\n    }\n  }\n  return state;\n};\n\nexport { changeAppNameAction, changeHostLanguageAction };\nexport default reducer;\n"],"sourceRoot":""}